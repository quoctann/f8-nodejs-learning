GHI CHÚ QUÁ TRÌNH HỌC

PHẦN 1: BẮT ĐẦU

Những dependencies nào bạn cảm thấy chỉ sử dụng cho dev thôi thì cài vào dev dependencies bằng cách:
    npm i a_node_package --save-dev
    Những package dev (khuyến nghị): morgan, nodemon

Config file package.json bằng cách vào phần scripts, thêm key và câu lệnh, sau này khi muốn sử dụng chỉ cần gõ npm câu_lệnh_mà_bạn_đã_đặt là chạy được, ngắn gọn và đơn giản hơn
    "scripts": {
        "start": "nodemon index.js",
    },

Thư viện express > đọc docs, thư viện morgan > ghi log trong quá trình dev

Node devtools: gõ node --inspect tên_file xong F12 mở chrome devtools rồi sử dụng

PHẦN 2: KIẾN THỨC CỐT LÕI

Template engine: dùng để trả về một html template, có nhiều template engine nhưng ở đây sẽ sd express-handlebars, cài đặt:
    npm install express-handlebars

Xem thêm document
- Khi res.render('tên tập tin handlebars') thì engine nó sẽ vào views/layouts tìm file main.handlebars để render layout, phần {{{body}}} nó sẽ tìm đến views tên tập tin vừa dùng ở trên để bỏ append vào {{{body}}} (tương tự jinja2), các đường dẫn, cấu trúc thư mục đều có thể config được (xem nội dung code, docs phần mở đầu)
- Config lại handlebars (xem docs phần API)
    app.engine('handlebars', handlebars({
        /* config here */
        extname: '.hbs',
    }));
    Như trên là config lại đuôi mở rộng của tất cả các file là .hbs thay vì .handlebars như mặc định > nhớ thay đổi tên các file trong views cho phù hợp, đổi luôn cả phần khai báo engine để không bị lỗi:
    app.engine("hbs", handlebars({
        extname: ".hbs",
        })
    );
    app.set("view engine", "hbs");

- Partial: render từng phần nhỏ là những tập tin rời rạc (như include trong jinja2):
    {{> foo/bar}}
    đường dẫn đến tập tin đó, mặc định nó sẽ vào thư mục partial để tìm

STATIC FILE AND SCSS
Static file: tại file index.js thêm dòng
    app.use(express.static(path.join(__dirname, "/resources/public")))
Để khi truy cập bằng url thì có thể truy cập được, vd: đường_dẫn/tên_file

Tích hợp SCSS, cài đặt node-sass vào dev-dependencies
    npm i node-sass --save-dev

Tạo một thư mục để lưu file build trog public, tạo thư mục để viết scss và tự động build vào thư mục css, sử dụng cmd interface trong package.json
    node-sass [options] <input> [output]
    node-sass --watch src/resources/scss/app.scss src/resources/public/css
    -w hoặc --watch sẽ theo dõi sự thay đổi và tự động build lại khi cần

Các scripts viết trong package.json chạy bằng cách gõ trong terminal: npm run câu_lệnh

Cấu hình nodemon để lắng nghe thay đổi cả các file scss (mặc định nó không có): tạo một file nodemon,json bên ngoài cùng project (ngang hàng với package.json), khai báo dạng object:
    {
        "ext": "js json"
    }

EXPRESS BASIC ROUTING (http://expressjs.com/)
app.METHOD("/routing_here", function (req, res) {
  /* Handler function here */
}); để nhận một request, server xử lý và trả về một response
app là một instance của express
METHOD là phương thức HTTP viết lowercase

QUERY PARAMETER: truyền data bằng phương thức get lấy data trên thanh url của trình duyệt
domainname.com/someroute?your_key=value1&otherkey=value2

HTML FORM BEHAVIOUR
Tạo một form với các ô input và submit, thì khi bấm submit hệ thống sẽ lấy value của tất cả các ô input có attribute name vào gắn lên URL và gửi request lên server bằng phương thức GET, dạng name: value (giống query parameter)
Thẻ form có một attribute method="METHOD" mặc định nếu không khai báo thì sẽ là GET
Khi bấm submit thì hệ thống sẽ gửi request ngay tại cái route hiện tại
Khi reload page mà trước đó vừa gửi request theo method gì thì nó sẽ giữ method đó
Thẻ form có một attribute là action mặc định là rỗng, giá trị của nó là URL sẽ handle request được gửi lên bởi form

POST METHOD
Gửi dưới dạng data form, không nằm trong url
Lấy data từ phương thức post, sử dụng một middleware để lấy dữ liệu:
    app.use(express.urlencoded());
xong phía dưới mới sử dụng truy xuất được:
    req.body
    req.query được builtin sẵn (sd với get) nên không cần require thêm middleware
middleware để parse request thành một object > dễ xử lý hơn.

PHẦN 3: XÂY DỰNG WEBSITE (MÔ HÌNH MVC)
Xem code comment. Luồng hoạt động:
CLIENT REQUEST -> src/index.js -> src/routes/index.js -> src/routes/your_route.js -> src/app/controller/your_controller.js -> SERVER RESPONSE

XEM THÊM: FORMAT CODE
JS: một line code không nên dài quá 80 ký tự, tab indent thì nên để 4 space cho dễ nhìn hơn, khi thao tác với chuỗi thì nên dùng dấu '' để dễ nhìn hơn thay vì ""
Prettier dùng để cấu hình format code theo một chuẩn chung nào đó, lint-staged khi kết hợp với Prettier sẽ cho phép chỉ format code khi file đang trong trạng thái staged, husky cho phép hooks lại khi commit hoặc khi push code lên git để thực hiện lệnh gì đó (vd ở đây là Prettier code lại)
Xem thêm docs

MONGODB
Sử dụng thư viện mongoose: https://github.com/Automattic/mongoose như một db driver cho cấu hình db chặt chẽ hơn (vì expressjs nó có hỗ trợ luôn thư viện tương tác với mongodb)

Có thể lấy param trên url bằng req.params.tên_slug với tên_slug là cái bạn đặt ở routing vd home/:slug 

Ý nghĩa một số phương thức:
GET gửi request lên server yêu cầu tài nguyên
POST gửi request lên server để tạo mới một dữ liệu nào đấy
PUT, PATCH: gửi req để cập nhật dữ liệu, put sẽ replace document, patch sửa từng field (sử dụng tùy hoàn cảnh)
OPTION, HEAD

$ npm install method-override
http://expressjs.com/en/resources/middleware/method-override.html
Thư viện này dùng để nhận một request POST từ form và chuyển nó thành PUT (do công nghệ hiện tại chưa đáp ứng được, điều này tuân thủ RESTFUL API)

MIDDLEWARE
Khái niệm chung, có vai trò trung gian (giống như bảo vệ) dùng để validate dữ liệu từ client lên server và ngược lại.
Chức năng:
1. Kiểm soát/validation
2. Không cho vào
3. validation passed -> cho vào
4. Chỉnh sửa, thay đổi dữ liệu

> next() sẽ chuyển phần xử lý đến middleware tiếp theo, theo trình tự từ trên xuống
> expressjs các function sau cái path được hiểu là các middleware như nhau
> middleware của path này không ảnh hưởng đến các path khác (app.get app.post ...)
> Tất cả các app.use là một middleware áp dụng được global (toàn project)

VD
app.get('/',
    // Middleware 1
    function(req, res, next) {
        if(['something', 'sometimes'].include(req.query.somekey)) {
            req.text = 'lorem islum dolo sit amet';
            return next();
        }
        res.status(403).json({
            message: 'Access denied',
        });
    },
    // Middleware 2
    function(req, res, next) {
        res.json({
            message: 'Success',
            text: req.text,
        });
    },
    // Middleware 3
    function(req, res, next) {
        somecode
    },
)

res.locals.something sẽ lưu biến tạm thời sử dụng trong request đó (xem docs api res.locals), ở ngoài view ta có thể sử dụng {{ something }} để truy xuất đến đối tượng này.